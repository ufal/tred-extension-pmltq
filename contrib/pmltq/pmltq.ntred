#!btred -e search
# -*- mode: cperl; coding: utf-8 -*-

#encoding UTF-8
#$Tree_Query_Btred::DEBUG=3;

package TredMacro;

my $query;

use Encode;
use Getopt::Long;
my $optparser=new Getopt::Long::Parser(config => ["bundling"]);
my %opts;
$optparser->getoptions(\%opts,
		       "info=s",
		       "query|Q=s",
		       "query-pml-file|p=s",
		       "query-file|f=s",
		       "filters|F=s",
		       "filter-code-out|o=s",
		       "apply-filters|a",
		       "query-id|i=s",
		       "netgraph-query=s",
		      );

my $query_file;	      # if used, we need the file persistently
unless ($opts{info}) {
  if ($opts{'query-pml-file'}) {
    $query_file = FSFile->newFSFile($opts{'query-pml-file'},[Backends()])
      or die "Failed to open PML query file: $opts{'query-pml-file'}!";
    $query = first {
      !$opts{'query-id'} or $_->{id} eq $opts{'query-id'}
    } $query_file->trees;
    die "Didn't find query $opts{'query-id'} in query file $opts{'query-pml-file'}!"
      unless $query;
  } elsif ($opts{'query-file'}) {
    open my $fh, '<:utf8', $opts{'query-file'} || die "Cannot open query file ".$opts{'query-file'}.": $!\n";
    local $/;
    $query = <$fh>;
    if ($opts{'query-id'}) {
      $query=~s/#\s*==\s*query:\s*\Q$opts{'query-id'}\E\s* ==(.*?)(?:#\s*==\s*query:\s*\w+\s*==.*|$)/$1/s;
    }
  } else {
    $query = Encode::decode('UTF-8',($opts{query} || join (' ',@ARGS)));
  }

  if (!ref($query) and $opts{'netgraph-query'}) {
    require Tree_Query::NG2PMLTQ;
    $query = Tree_Query::NG2PMLTQ::ng2pmltq($query,{type=>$opts{'netgraph-query'}});
  }

  die "Query is empty!" unless $query;

  my $filters = $opts{'filters'};
  if ($filters=~/\S/) {
    $filters='>> '.$filters unless $filters =~ /^\s*>>/;
    if (ref($query)) {
      $query->{'output-filters'}||=Fslib::List->new();
      push @{$query->{'output-filters'}},@{ Tree_Query::Common::parse_filters($filters) };
      #    print Data::Dumper::Dumper($query->{'output-filters'});
    } elsif ($query) {
      $query .= $filters;
    }
  }
}

my $search;
use Data::Dumper;

sub init_search {
  my $mapper = Tree_Query::TypeMapper->new({file=>CurrentFile()});
  my $search = Tree_Query::BtredEvaluator->new($query, {
    type_mapper => $mapper,
    plan => 1,
  });
  undef $query; # not needed anymore
  undef $query_file;
  unless ($opts{'apply-filters'}) {
    my $filters = $search->get_filters;
    if ($filters and @$filters) {
#      if (!$TredMacro::NTRED_SERVER_NO or $TredMacro::NTRED_SERVER_NO == 1) {
	my $fh;
	if ($opts{'filter-code-out'}) {
	  if (!-f $opts{'filter-code-out'}) {
	    open $fh, '>', $opts{'filter-code-out'} || die "Cannot open $opts{'filter-code-out'} for writing: $!\n";
	  }
	} else {
	  $fh=\*STDERR;
	}
	if ($fh) {
	  print $fh Data::Dumper->Dump([[map { { code=>$_->{code}, local_filters_code => $_->{local_filters_code} } } @$filters]],['filters']);
	  close($fh);
	}
#      }
      @$filters = ($search->std_out_filter);
    }
  }
  $search->init_filters;
  return $search;
}


# $Tree_Query_Btred::DEBUG = 1;
my $info_only = $opts{info} ? 1 : 0;
sub search {
  if ($info_only) {
    return if $info_only==2;
    $info_only = 2;
    my $mapper = Tree_Query::TypeMapper->new({file=>CurrentFile()});
    if ($opts{info} eq 'node-types') {
      print map "$_\n", @{$mapper->get_node_types};
    } elsif ($opts{info} eq 'relations') {
      print map "$_\n", @{$mapper->get_specific_relations};
    } else {
      die "Unrecognized info command\n";
    }
  } else {
    $search ||= init_search();
    while ($search->find_next_match) {
      unless ($search->run_filters) {
	FPosition($search->r($variable));
      }
    }
    $search->reset(); # prepare for next file
  }
}

sub exit_hook {
  $search && $search->flush_filters;
}

#-*- cperl -*-

#ifndef pmltq
#define pmltq
#define tree_query

#include <contrib/pml/PML.mak>

use Config;

BEGIN {
  use File::Path;
  use File::Find;
  our $grp;
  my $MINIMAL_PMLTQ_VERSION = '3.0.2';
  my $correct_version = 0;
  my $my_dir  = _directory_of_this_module();
  my $lib_dir = "$my_dir/../../libs";

  print STDERR "PMLTQ: Initializing the PMLTQ extension.\n";

  if ( $^O !~ /^MSWin/ ) {
    my $arch = $Config{archname};
    unshift @INC, "$lib_dir/lib/perl5", "$lib_dir/lib/perl5/$arch";
    print STDERR "PMLTQ: Extending \@INC with: $lib_dir/lib/perl5, $lib_dir/lib/perl5/$arch\n";
  }

  if(not eval {
      require PMLTQ; 
      $correct_version = sprintf("%05d %05d %05d ", split /\./, PMLTQ->VERSION) ge sprintf("%05d %05d %05d ",split /\./, $MINIMAL_PMLTQ_VERSION);
      } ) {
    print STDERR $correct_version
          ? "PMLTQ: Minimal required PMLTQ version $MINIMAL_PMLTQ_VERSION is not installed on the system. Trying to install it from CPAN.\n"
          : "PMLTQ: PMLTQ not installed on the system. Trying to install it from CPAN.\n";
    my $command;
    if ( $^O =~ /^MSWin/ ) {
        $command = $^X.' -e "use CPAN; CPAN::Shell->rematein(q(notest), q(install), q(PMLTQ));"';
    }
    else {                                # sh expected otherwise
        my $cpanm = "$my_dir/../../bin/cpanm";
        if(system "$^X $cpanm --info PMLTQ") { # error while running cpanm
          TrEd::Extensions::update_extensions_list('pmltq',0);
          TrEd::Error::Message::error_message( $grp, "PMLTQ: Running cpanm failed - unable to install PMLTQ\n$^X $cpanm\nCheck your permissions to ~/.cpanm !!!\n\npermissions:\n\tPERMISSIONS\tOWNER\tPATH\n".`ls -ld --time-style="+" ~ ~/.cpanm|tr -s " "|cut -d" " -f 1,3,6-|tr " " "\t"|sed "s/^/\t/"`."\ncurrent user: $ENV{USER}\n\nExtension has been dissabled !!!" );
          return;
        }
        # current PERL5LIB should be perhaps passed to cpanm, so that modules are not installed twice (?)
        $command = "$^X $cpanm --no-sudo -v -l $lib_dir --notest PMLTQ 2>\&1";
    }

    print STDERR "PMLTQ: Executing cpanm: $command\n";
    my $cmderror = system($command);
    if ( eval { require PMLTQ } ) {
        print STDERR "PMLTQ: PMLTQ and related modules successfully installed\n";
    }
    else {
        TrEd::Extensions::update_extensions_list('pmltq',0);
        TrEd::Error::Message::error_message( $grp, "PMLTQ: Installation of PMLTQ from CPAN by cpanm failed:\n$cmderror\n$@\n\nExtension has been dissabled !!!" );
        return;
    }
  }

#  my $upper_dir = "$my_dir/../..";
#  find( sub {
#          my $file = $_;
#          warn "INFO: Processing $File::Find::name.";
#          return unless -f $file;
#          my ($prefix, $newpath)
#              = ("$File::Find::dir/" =~ m{.*/($arch|perl5)/(.*)});
#          $_ //= q() for $newpath, $prefix;
#          mkpath("$upper_dir/libs/$newpath") or warn "WARNING: Cannot make path $upper_dir/libs/$newpath: $!\n";
#          link($File::Find::name, "$upper_dir/libs/$newpath/$file") or die $!;
#      }, "$upper_dir/libs/lib/perl5" );
  print STDERR "PMLTQ: Done.\n";



  sub _directory_of_this_module {
    my %call_info;
    @call_info{
        qw(pack file line sub has_args wantarray evaltext is_require)
        } = caller(0);
    $call_info{file} =~ s/[\/][^\/]+$//;
    return $call_info{file};
  }
}

#binding-context PMLTQ

#include "tree_query.mak"

#####include "tree_query_sql.mak"
# package PMLTQ::SQLEvaluator; # so that it gets reloaded

package PMLTQ::TrEdSearch; # so that it gets reloaded
package PMLTQ::TypeMapper; # so that it gets reloaded
package PMLTQ::TrEd; # so that it gets reloaded
package PMLTQ::Common; # so that it gets reloaded
package PMLTQ::NG2PMLTQ; # so that it gets reloaded
package PMLTQ::BtredEvaluator; # so that it gets reloaded
package PMLTQ::Planner; # so that it gets reloaded
package PMLTQ::Relation; # so that it gets reloaded

#include "tree_query_http.mak"
#include "tree_query_tred.mak"
#include "tree_query_btred.mak"

#endif tree_query
